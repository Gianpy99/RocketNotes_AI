rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isFamilyMember(familyId) {
      return isAuthenticated() &&
             request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
    }

    function isFamilyAdmin(familyId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.role in ['owner', 'admin'];
    }

    function isFamilyOwner(familyId) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/families/$(familyId)).data.ownerId == request.auth.uid;
    }

    function canInviteMembers(familyId) {
      return isFamilyMember(familyId) &&
             exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.permissions.canInviteMembers == true;
    }

    function canManageMembers(familyId) {
      return isFamilyAdmin(familyId) ||
             (isFamilyMember(familyId) &&
              exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
              get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.permissions.canRemoveMembers == true);
    }

    function canShareNotes(familyId) {
      return isFamilyMember(familyId) &&
             exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.permissions.canShareNotes == true;
    }

    function canManagePermissions(familyId) {
      return isFamilyAdmin(familyId) ||
             (isFamilyMember(familyId) &&
              exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
              get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.permissions.canManagePermissions == true);
    }

    function hasNoteAccess(noteId, familyId, permission) {
      return isFamilyMember(familyId) &&
             (permission in ['view', 'comment'] ||
              (permission == 'edit' && 
               exists(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/families/$(familyId)/members/$(request.auth.uid)).data.permissions.canShareNotes == true));
    }

    // Users collection
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAuthenticated();
    }

    // Families collection
    match /families/{familyId} {
      allow read: if isFamilyMember(familyId);
      // Allow any authenticated user (including anonymous) to create a family
      allow create: if isAuthenticated();
      allow update: if isFamilyAdmin(familyId);
      allow delete: if isFamilyOwner(familyId);

      // Family members subcollection
      match /members/{memberId} {
        allow read: if isFamilyMember(familyId);
        allow create: if canInviteMembers(familyId) ||
                         (request.auth.uid == memberId && 
                          exists(/databases/$(database)/documents/families/$(familyId)/invitations/$(request.auth.uid)));
        allow update: if canManagePermissions(familyId) || 
                         (isOwner(memberId) && 
                          !('role' in request.resource.data.diff(resource.data).affectedKeys()));
        allow delete: if canManageMembers(familyId) || isOwner(memberId);
      }

      // Family invitations subcollection
      match /invitations/{invitationId} {
        allow read: if isFamilyMember(familyId) || 
                       request.auth.token.email == resource.data.inviteeEmail;
        allow create: if canInviteMembers(familyId);
        allow update: if request.auth.token.email == resource.data.inviteeEmail ||
                         canManageMembers(familyId);
        allow delete: if canManageMembers(familyId) ||
                         request.auth.token.email == resource.data.inviteeEmail;
      }

      // Family activity subcollection
      match /activity/{activityId} {
        allow read: if isFamilyMember(familyId);
        allow create: if isFamilyMember(familyId);
        allow update, delete: if false; // Activity logs are immutable
      }
    }

    // Shared notes collection
    match /shared_notes/{noteId} {
      allow read: if resource.data.familyId != null && 
                     hasNoteAccess(noteId, resource.data.familyId, 'view');
      allow create: if request.auth.uid == request.resource.data.sharedBy &&
                       canShareNotes(request.resource.data.familyId);
      allow update: if resource.data.familyId != null && 
                       hasNoteAccess(noteId, resource.data.familyId, 'edit');
      allow delete: if resource.data.sharedBy == request.auth.uid ||
                       isFamilyAdmin(resource.data.familyId);

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if hasNoteAccess(noteId, get(/databases/$(database)/documents/shared_notes/$(noteId)).data.familyId, 'view');
        allow create: if hasNoteAccess(noteId, get(/databases/$(database)/documents/shared_notes/$(noteId)).data.familyId, 'comment') &&
                         request.auth.uid == request.resource.data.authorId;
        allow update: if request.auth.uid == resource.data.authorId;
        allow delete: if request.auth.uid == resource.data.authorId ||
                         isFamilyAdmin(get(/databases/$(database)/documents/shared_notes/$(noteId)).data.familyId);
      }

      // Collaboration metadata subcollection
      match /collaboration/{sessionId} {
        allow read, write: if hasNoteAccess(noteId, get(/databases/$(database)/documents/shared_notes/$(noteId)).data.familyId, 'view');
      }
    }

    // Voice sessions collection
    match /voice_sessions/{sessionId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
    }

    // Backup archives collection  
    match /backup_archives/{archiveId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    // Security events collection (audit log)
    match /security_events/{eventId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      allow update, delete: if false; // Security events are immutable
    }
  }
}
    }

    // Shared Notes collection
    match /shared_notes/{sharedNoteId} {
      // Allow read for family members
      allow read: if isFamilyMember(resource.data.familyId);

      // Allow create for users who can share notes
      allow create: if isAuthenticated() &&
                    canShareNotes(resource.data.familyId) &&
                    request.auth.uid == resource.data.sharedBy;

      // Allow update for note sharer or family admins
      allow update: if isAuthenticated() &&
                    (request.auth.uid == resource.data.sharedBy ||
                     isFamilyAdmin(resource.data.familyId));

      // Allow delete for note sharer or family admins
      allow delete: if isAuthenticated() &&
                    (request.auth.uid == resource.data.sharedBy ||
                     isFamilyAdmin(resource.data.familyId));
    }

    // Note Permissions collection
    match /note_permissions/{permissionId} {
      // Allow read for family members
      allow read: if isFamilyMember(resource.data.familyId);

      // Allow create for users who can manage permissions or note sharer
      allow create: if isAuthenticated() &&
                    (canManagePermissions(resource.data.familyId) ||
                     request.auth.uid == resource.data.grantedBy);

      // Allow update for users who can manage permissions
      allow update: if isAuthenticated() &&
                    canManagePermissions(resource.data.familyId);

      // Allow delete for users who can manage permissions
      allow delete: if isAuthenticated() &&
                    canManagePermissions(resource.data.familyId);
    }

    // Collaboration Sessions collection
    match /collaboration_sessions/{sessionId} {
      // Allow read for family members of the associated shared note
      allow read: if isFamilyMember(resource.data.familyId);

      // Allow create for users who can collaborate on the shared note
      allow create: if isAuthenticated() &&
                    isFamilyMember(resource.data.familyId) &&
                    exists(/databases/$(database)/documents/shared_notes/$(resource.data.sharedNoteId)) &&
                    get(/databases/$(database)/documents/shared_notes/$(resource.data.sharedNoteId)).data.allowCollaboration == true;

      // Allow update for active collaborators
      allow update: if isAuthenticated() &&
                    isFamilyMember(resource.data.familyId) &&
                    request.auth.uid in resource.data.activeUsers;

      // Allow delete for session creator or family admins
      allow delete: if isAuthenticated() &&
                    (request.auth.uid == resource.data.createdBy ||
                     isFamilyAdmin(resource.data.familyId));
    }

    // User Profiles collection (if implemented)
    match /users/{userId} {
      // Allow read for the user themselves
      allow read: if isOwner(userId);

      // Allow create for the user themselves
      allow create: if isOwner(userId);

      // Allow update for the user themselves
      allow update: if isOwner(userId);

      // Allow delete for the user themselves (account deletion)
      allow delete: if isOwner(userId);
    }

    // Audit Logs collection (if implemented)
    match /audit_logs/{logId} {
      // Allow read for family admins
      allow read: if isFamilyAdmin(resource.data.familyId);

      // Allow create for system operations (server-side only)
      allow create: if false; // Only server-side functions can create audit logs

      // No updates or deletes allowed
      allow update: if false;
      allow delete: if false;
    }

    // Family Settings collection (if implemented)
    match /family_settings/{familyId} {
      // Allow read for family members
      allow read: if isFamilyMember(familyId);

      // Allow update for family admins
      allow update: if isFamilyAdmin(familyId);

      // Allow create for family owner
      allow create: if isFamilyOwner(familyId);

      // No deletes allowed (settings should be preserved)
      allow delete: if false;
    }

    // Default deny for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
