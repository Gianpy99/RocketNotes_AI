import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// Push notification service for family activities
class FamilyNotificationService {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();
  static const String _notificationSettingsKey = 'family_notification_settings';

  /// Initialize the notification service
  Future<void> initialize() async {
    await _requestPermission();
    await _initializeLocalNotifications();
    await _configureFirebaseMessaging();
    final token = await _firebaseMessaging.getToken();
    if (token != null) {
      debugPrint('FCM Token: $token');
      // TODO: invia il token al server se necessario
    }
  }

  Future<void> _requestPermission() async {
    await _firebaseMessaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
      provisional: false,
    );
  }

  Future<void> _initializeLocalNotifications() async {
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );
    const settings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );
    await _localNotifications.initialize(settings);
  }

  Future<void> _configureFirebaseMessaging() async {
    // Qui puoi aggiungere i listener se necessario
  }

  Future<Map<String, bool>> getNotificationSettings() async {
    final prefs = await SharedPreferences.getInstance();
    final jsonStr = prefs.getString(_notificationSettingsKey);
    if (jsonStr == null) return {};
    try {
      final map = Map<String, dynamic>.from(jsonDecode(jsonStr));
      return map.map((k, v) => MapEntry(k, v as bool));
    } catch (_) {
      return {};
    }
  }

  Future<void> setNotificationSetting(String key, bool value) async {
    final prefs = await SharedPreferences.getInstance();
    final current = await getNotificationSettings();
    current[key] = value;
    await prefs.setString(_notificationSettingsKey, jsonEncode(current));
  }
}

enum NotificationType {
  invitation,
  sharedNote,
  permission,
  settings,
}

final familyNotificationServiceProvider = Provider<FamilyNotificationService>((ref) {
  return FamilyNotificationService();
});

final notificationSettingsProvider = FutureProvider<Map<NotificationType, bool>>((ref) {
  final service = ref.watch(familyNotificationServiceProvider);
  // Restituisce impostazioni di default (tutte true) per ora
  return Future.value({
    for (final type in NotificationType.values) type: true,
  });
});
