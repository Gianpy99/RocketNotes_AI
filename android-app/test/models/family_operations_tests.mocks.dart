// Mocks generated by Mockito 5.4.4 from annotations
// in pensieve/test/models/family_operations_tests.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pensieve/features/family/providers/auth_providers.dart' as _i4;
import 'package:pensieve/features/family/repositories/family_repository.dart'
    as _i5;
import 'package:pensieve/models/family.dart' as _i2;
import 'package:pensieve/models/family_invitation.dart' as _i3;
import 'package:pensieve/models/family_member.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFamily_0 extends _i1.SmartFake implements _i2.Family {
  _FakeFamily_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFamilyInvitation_1 extends _i1.SmartFake
    implements _i3.FamilyInvitation {
  _FakeFamilyInvitation_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFamilyAuthState_2 extends _i1.SmartFake
    implements _i4.FamilyAuthState {
  _FakeFamilyAuthState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FamilyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFamilyRepository extends _i1.Mock implements _i5.FamilyRepository {
  MockFamilyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Family> createFamily({
    required String? ownerId,
    required String? name,
    required _i2.FamilySettings? settings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFamily,
          [],
          {
            #ownerId: ownerId,
            #name: name,
            #settings: settings,
          },
        ),
        returnValue: _i6.Future<_i2.Family>.value(_FakeFamily_0(
          this,
          Invocation.method(
            #createFamily,
            [],
            {
              #ownerId: ownerId,
              #name: name,
              #settings: settings,
            },
          ),
        )),
      ) as _i6.Future<_i2.Family>);

  @override
  _i6.Future<_i2.Family?> getFamily(String? familyId) => (super.noSuchMethod(
        Invocation.method(
          #getFamily,
          [familyId],
        ),
        returnValue: _i6.Future<_i2.Family?>.value(),
      ) as _i6.Future<_i2.Family?>);

  @override
  _i6.Future<void> updateFamily(
    String? familyId, {
    String? name,
    _i2.FamilySettings? settings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFamily,
          [familyId],
          {
            #name: name,
            #settings: settings,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateFamilyOwner(
    String? familyId,
    String? newOwnerId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFamilyOwner,
          [
            familyId,
            newOwnerId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFamily(String? familyId) => (super.noSuchMethod(
        Invocation.method(
          #deleteFamily,
          [familyId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addFamilyMember({
    required String? familyId,
    required String? userId,
    required _i7.FamilyRole? role,
    required _i7.MemberPermissions? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFamilyMember,
          [],
          {
            #familyId: familyId,
            #userId: userId,
            #role: role,
            #permissions: permissions,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i7.FamilyMember?> getFamilyMember(
    String? familyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFamilyMember,
          [
            familyId,
            userId,
          ],
        ),
        returnValue: _i6.Future<_i7.FamilyMember?>.value(),
      ) as _i6.Future<_i7.FamilyMember?>);

  @override
  _i6.Future<List<_i7.FamilyMember>> getFamilyMembers(String? familyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFamilyMembers,
          [familyId],
        ),
        returnValue:
            _i6.Future<List<_i7.FamilyMember>>.value(<_i7.FamilyMember>[]),
      ) as _i6.Future<List<_i7.FamilyMember>>);

  @override
  _i6.Future<void> updateFamilyMember({
    required String? familyId,
    required String? userId,
    _i7.FamilyRole? role,
    _i7.MemberPermissions? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFamilyMember,
          [],
          {
            #familyId: familyId,
            #userId: userId,
            #role: role,
            #permissions: permissions,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> removeFamilyMember(
    String? familyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFamilyMember,
          [
            familyId,
            userId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateMemberLastActive(
    String? familyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMemberLastActive,
          [
            familyId,
            userId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i3.FamilyInvitation> createInvitation({
    required String? familyId,
    required String? invitedBy,
    required String? email,
    required _i7.FamilyRole? role,
    required _i7.MemberPermissions? permissions,
    DateTime? expiresAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInvitation,
          [],
          {
            #familyId: familyId,
            #invitedBy: invitedBy,
            #email: email,
            #role: role,
            #permissions: permissions,
            #expiresAt: expiresAt,
          },
        ),
        returnValue:
            _i6.Future<_i3.FamilyInvitation>.value(_FakeFamilyInvitation_1(
          this,
          Invocation.method(
            #createInvitation,
            [],
            {
              #familyId: familyId,
              #invitedBy: invitedBy,
              #email: email,
              #role: role,
              #permissions: permissions,
              #expiresAt: expiresAt,
            },
          ),
        )),
      ) as _i6.Future<_i3.FamilyInvitation>);

  @override
  _i6.Future<_i3.FamilyInvitation?> getInvitation(String? invitationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInvitation,
          [invitationId],
        ),
        returnValue: _i6.Future<_i3.FamilyInvitation?>.value(),
      ) as _i6.Future<_i3.FamilyInvitation?>);

  @override
  _i6.Future<List<_i3.FamilyInvitation>> getPendingInvitations(
          String? familyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingInvitations,
          [familyId],
        ),
        returnValue: _i6.Future<List<_i3.FamilyInvitation>>.value(
            <_i3.FamilyInvitation>[]),
      ) as _i6.Future<List<_i3.FamilyInvitation>>);

  @override
  _i6.Future<void> updateInvitationStatus(
    String? invitationId,
    _i3.InvitationStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateInvitationStatus,
          [
            invitationId,
            status,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> incrementFamilyMemberCount(String? familyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementFamilyMemberCount,
          [familyId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> decrementFamilyMemberCount(String? familyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #decrementFamilyMemberCount,
          [familyId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateFamilySettings(
    String? familyId,
    _i2.FamilySettings? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFamilySettings,
          [
            familyId,
            settings,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i7.FamilyMember?> getFamilyMemberByEmail(
    String? familyId,
    String? email,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFamilyMemberByEmail,
          [
            familyId,
            email,
          ],
        ),
        returnValue: _i6.Future<_i7.FamilyMember?>.value(),
      ) as _i6.Future<_i7.FamilyMember?>);

  @override
  _i6.Future<int> getFamilyMemberCount(String? familyId) => (super.noSuchMethod(
        Invocation.method(
          #getFamilyMemberCount,
          [familyId],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);
}

/// A class which mocks [AuthGuard].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthGuard extends _i1.Mock implements _i4.AuthGuard {
  MockAuthGuard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FamilyAuthState get authState => (super.noSuchMethod(
        Invocation.getter(#authState),
        returnValue: _FakeFamilyAuthState_2(
          this,
          Invocation.getter(#authState),
        ),
      ) as _i4.FamilyAuthState);

  @override
  bool canAccessFamilyFeatures() => (super.noSuchMethod(
        Invocation.method(
          #canAccessFamilyFeatures,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool hasFamily() => (super.noSuchMethod(
        Invocation.method(
          #hasFamily,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool canInviteMembers() => (super.noSuchMethod(
        Invocation.method(
          #canInviteMembers,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool canManageMembers() => (super.noSuchMethod(
        Invocation.method(
          #canManageMembers,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool canShareNotes() => (super.noSuchMethod(
        Invocation.method(
          #canShareNotes,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool canManagePermissions() => (super.noSuchMethod(
        Invocation.method(
          #canManagePermissions,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool canViewAuditLogs() => (super.noSuchMethod(
        Invocation.method(
          #canViewAuditLogs,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isOwner() => (super.noSuchMethod(
        Invocation.method(
          #isOwner,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isAdmin() => (super.noSuchMethod(
        Invocation.method(
          #isAdmin,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void requireAuthentication() => super.noSuchMethod(
        Invocation.method(
          #requireAuthentication,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requireFamily() => super.noSuchMethod(
        Invocation.method(
          #requireFamily,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requirePermission(String? permission) => super.noSuchMethod(
        Invocation.method(
          #requirePermission,
          [permission],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requireOwner() => super.noSuchMethod(
        Invocation.method(
          #requireOwner,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requireAdmin() => super.noSuchMethod(
        Invocation.method(
          #requireAdmin,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
